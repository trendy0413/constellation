/// <reference types="react" />
import type * as Stitches from '@stitches/react';
export declare const config: {
    prefix: "";
    media: {
        dark: "(prefers-color-scheme: dark)";
        hover: "(any-hover: hover)";
        laptop: "(min-width: 1023px)";
        light: "(prefers-color-scheme: light)";
        mobile: "(min-width: 479px)";
        motion: "(prefers-reduced-motion)";
        tablet: "(min-width: 767px)";
    };
    theme: {
        colors: {
            white1: any;
            white100: any;
            white200: any;
            white400: any;
            white60: any;
            white600: any;
            white800: any;
            teal0: any;
            teal100: any;
            teal200: any;
            teal300: any;
            teal400: any;
            teal500: any;
            teal600: any;
            teal700: any;
            teal800: any;
            teal900: any;
            red0: any;
            red100: any;
            red200: any;
            red300: any;
            red400: any;
            red500: any;
            red600: any;
            red700: any;
            red800: any;
            red900: any;
            purple0: any;
            purple100: any;
            purple200: any;
            purple300: any;
            purple400: any;
            purple500: any;
            purple600: any;
            purple700: any;
            purple800: any;
            purple900: any;
            orange0: any;
            orange100: any;
            orange200: any;
            orange300: any;
            orange400: any;
            orange500: any;
            orange600: any;
            orange700: any;
            orange800: any;
            orange900: any;
            grey0: any;
            grey100: any;
            grey200: any;
            grey300: any;
            grey400: any;
            grey500: any;
            grey600: any;
            grey700: any;
            grey800: any;
            grey900: any;
            green0: any;
            green100: any;
            green200: any;
            green300: any;
            green400: any;
            green500: any;
            green600: any;
            green700: any;
            green800: any;
            green900: any;
            dark100: any;
            dark200: any;
            dark400: any;
            dark60: any;
            dark600: any;
            dark700: any;
            dark800: any;
            dark900: any;
            blue0: any;
            blue100: any;
            blue200: any;
            blue300: any;
            blue400: any;
            blue500: any;
            blue600: any;
            blue700: any;
            blue800: any;
            blue900: any;
        };
        fontSizes: {
            10: any;
            12: any;
            14: any;
            16: any;
            20: any;
            24: any;
            32: any;
            40: any;
        };
        fonts: {
            inter: any;
        };
        radii: {
            1: any;
            2: any;
            3: any;
            pill: any;
            round: any;
        };
        sizes: {
            4: any;
            8: any;
            16: any;
            24: any;
            32: any;
            40: any;
            48: any;
            64: any;
            72: any;
            80: any;
        };
        space: {
            4: any;
            8: any;
            16: any;
            24: any;
            32: any;
            40: any;
            48: any;
            64: any;
            80: any;
            120: any;
        };
        zIndices: {
            1: any;
            2: any;
            3: any;
            4: any;
            max: any;
        };
    };
    themeMap: import("@stitches/react/types/config").DefaultThemeMap;
    utils: {};
}, createTheme: <Argument0 extends string | ({
    colors?: {
        white1?: string | number | boolean | undefined;
        white100?: string | number | boolean | undefined;
        white200?: string | number | boolean | undefined;
        white400?: string | number | boolean | undefined;
        white60?: string | number | boolean | undefined;
        white600?: string | number | boolean | undefined;
        white800?: string | number | boolean | undefined;
        teal0?: string | number | boolean | undefined;
        teal100?: string | number | boolean | undefined;
        teal200?: string | number | boolean | undefined;
        teal300?: string | number | boolean | undefined;
        teal400?: string | number | boolean | undefined;
        teal500?: string | number | boolean | undefined;
        teal600?: string | number | boolean | undefined;
        teal700?: string | number | boolean | undefined;
        teal800?: string | number | boolean | undefined;
        teal900?: string | number | boolean | undefined;
        red0?: string | number | boolean | undefined;
        red100?: string | number | boolean | undefined;
        red200?: string | number | boolean | undefined;
        red300?: string | number | boolean | undefined;
        red400?: string | number | boolean | undefined;
        red500?: string | number | boolean | undefined;
        red600?: string | number | boolean | undefined;
        red700?: string | number | boolean | undefined;
        red800?: string | number | boolean | undefined;
        red900?: string | number | boolean | undefined;
        purple0?: string | number | boolean | undefined;
        purple100?: string | number | boolean | undefined;
        purple200?: string | number | boolean | undefined;
        purple300?: string | number | boolean | undefined;
        purple400?: string | number | boolean | undefined;
        purple500?: string | number | boolean | undefined;
        purple600?: string | number | boolean | undefined;
        purple700?: string | number | boolean | undefined;
        purple800?: string | number | boolean | undefined;
        purple900?: string | number | boolean | undefined;
        orange0?: string | number | boolean | undefined;
        orange100?: string | number | boolean | undefined;
        orange200?: string | number | boolean | undefined;
        orange300?: string | number | boolean | undefined;
        orange400?: string | number | boolean | undefined;
        orange500?: string | number | boolean | undefined;
        orange600?: string | number | boolean | undefined;
        orange700?: string | number | boolean | undefined;
        orange800?: string | number | boolean | undefined;
        orange900?: string | number | boolean | undefined;
        grey0?: string | number | boolean | undefined;
        grey100?: string | number | boolean | undefined;
        grey200?: string | number | boolean | undefined;
        grey300?: string | number | boolean | undefined;
        grey400?: string | number | boolean | undefined;
        grey500?: string | number | boolean | undefined;
        grey600?: string | number | boolean | undefined;
        grey700?: string | number | boolean | undefined;
        grey800?: string | number | boolean | undefined;
        grey900?: string | number | boolean | undefined;
        green0?: string | number | boolean | undefined;
        green100?: string | number | boolean | undefined;
        green200?: string | number | boolean | undefined;
        green300?: string | number | boolean | undefined;
        green400?: string | number | boolean | undefined;
        green500?: string | number | boolean | undefined;
        green600?: string | number | boolean | undefined;
        green700?: string | number | boolean | undefined;
        green800?: string | number | boolean | undefined;
        green900?: string | number | boolean | undefined;
        dark100?: string | number | boolean | undefined;
        dark200?: string | number | boolean | undefined;
        dark400?: string | number | boolean | undefined;
        dark60?: string | number | boolean | undefined;
        dark600?: string | number | boolean | undefined;
        dark700?: string | number | boolean | undefined;
        dark800?: string | number | boolean | undefined;
        dark900?: string | number | boolean | undefined;
        blue0?: string | number | boolean | undefined;
        blue100?: string | number | boolean | undefined;
        blue200?: string | number | boolean | undefined;
        blue300?: string | number | boolean | undefined;
        blue400?: string | number | boolean | undefined;
        blue500?: string | number | boolean | undefined;
        blue600?: string | number | boolean | undefined;
        blue700?: string | number | boolean | undefined;
        blue800?: string | number | boolean | undefined;
        blue900?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        10?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        14?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        inter?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        pill?: string | number | boolean | undefined;
        round?: string | number | boolean | undefined;
    } | undefined;
    sizes?: {
        4?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        72?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        4?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
        120?: string | number | boolean | undefined;
    } | undefined;
    zIndices?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        max?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    colors?: {
        white1?: string | number | boolean | undefined;
        white100?: string | number | boolean | undefined;
        white200?: string | number | boolean | undefined;
        white400?: string | number | boolean | undefined;
        white60?: string | number | boolean | undefined;
        white600?: string | number | boolean | undefined;
        white800?: string | number | boolean | undefined;
        teal0?: string | number | boolean | undefined;
        teal100?: string | number | boolean | undefined;
        teal200?: string | number | boolean | undefined;
        teal300?: string | number | boolean | undefined;
        teal400?: string | number | boolean | undefined;
        teal500?: string | number | boolean | undefined;
        teal600?: string | number | boolean | undefined;
        teal700?: string | number | boolean | undefined;
        teal800?: string | number | boolean | undefined;
        teal900?: string | number | boolean | undefined;
        red0?: string | number | boolean | undefined;
        red100?: string | number | boolean | undefined;
        red200?: string | number | boolean | undefined;
        red300?: string | number | boolean | undefined;
        red400?: string | number | boolean | undefined;
        red500?: string | number | boolean | undefined;
        red600?: string | number | boolean | undefined;
        red700?: string | number | boolean | undefined;
        red800?: string | number | boolean | undefined;
        red900?: string | number | boolean | undefined;
        purple0?: string | number | boolean | undefined;
        purple100?: string | number | boolean | undefined;
        purple200?: string | number | boolean | undefined;
        purple300?: string | number | boolean | undefined;
        purple400?: string | number | boolean | undefined;
        purple500?: string | number | boolean | undefined;
        purple600?: string | number | boolean | undefined;
        purple700?: string | number | boolean | undefined;
        purple800?: string | number | boolean | undefined;
        purple900?: string | number | boolean | undefined;
        orange0?: string | number | boolean | undefined;
        orange100?: string | number | boolean | undefined;
        orange200?: string | number | boolean | undefined;
        orange300?: string | number | boolean | undefined;
        orange400?: string | number | boolean | undefined;
        orange500?: string | number | boolean | undefined;
        orange600?: string | number | boolean | undefined;
        orange700?: string | number | boolean | undefined;
        orange800?: string | number | boolean | undefined;
        orange900?: string | number | boolean | undefined;
        grey0?: string | number | boolean | undefined;
        grey100?: string | number | boolean | undefined;
        grey200?: string | number | boolean | undefined;
        grey300?: string | number | boolean | undefined;
        grey400?: string | number | boolean | undefined;
        grey500?: string | number | boolean | undefined;
        grey600?: string | number | boolean | undefined;
        grey700?: string | number | boolean | undefined;
        grey800?: string | number | boolean | undefined;
        grey900?: string | number | boolean | undefined;
        green0?: string | number | boolean | undefined;
        green100?: string | number | boolean | undefined;
        green200?: string | number | boolean | undefined;
        green300?: string | number | boolean | undefined;
        green400?: string | number | boolean | undefined;
        green500?: string | number | boolean | undefined;
        green600?: string | number | boolean | undefined;
        green700?: string | number | boolean | undefined;
        green800?: string | number | boolean | undefined;
        green900?: string | number | boolean | undefined;
        dark100?: string | number | boolean | undefined;
        dark200?: string | number | boolean | undefined;
        dark400?: string | number | boolean | undefined;
        dark60?: string | number | boolean | undefined;
        dark600?: string | number | boolean | undefined;
        dark700?: string | number | boolean | undefined;
        dark800?: string | number | boolean | undefined;
        dark900?: string | number | boolean | undefined;
        blue0?: string | number | boolean | undefined;
        blue100?: string | number | boolean | undefined;
        blue200?: string | number | boolean | undefined;
        blue300?: string | number | boolean | undefined;
        blue400?: string | number | boolean | undefined;
        blue500?: string | number | boolean | undefined;
        blue600?: string | number | boolean | undefined;
        blue700?: string | number | boolean | undefined;
        blue800?: string | number | boolean | undefined;
        blue900?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        10?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        14?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        inter?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        pill?: string | number | boolean | undefined;
        round?: string | number | boolean | undefined;
    } | undefined;
    sizes?: {
        4?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        72?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        4?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
        120?: string | number | boolean | undefined;
    } | undefined;
    zIndices?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        max?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1 | undefined) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? import("@stitches/react/types/stitches").ThemeTokens<Argument1, ""> : import("@stitches/react/types/stitches").ThemeTokens<Argument0, "">), css: <Composers extends (string | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> | import("@stitches/react/types/util").Function | {
    [name: string]: unknown;
})[], CSS_1 = import("@stitches/react/types/css-util").CSS<{
    dark: "(prefers-color-scheme: dark)";
    hover: "(any-hover: hover)";
    laptop: "(min-width: 1023px)";
    light: "(prefers-color-scheme: light)";
    mobile: "(min-width: 479px)";
    motion: "(prefers-reduced-motion)";
    tablet: "(min-width: 767px)";
}, {
    colors: {
        white1: any;
        white100: any;
        white200: any;
        white400: any;
        white60: any;
        white600: any;
        white800: any;
        teal0: any;
        teal100: any;
        teal200: any;
        teal300: any;
        teal400: any;
        teal500: any;
        teal600: any;
        teal700: any;
        teal800: any;
        teal900: any;
        red0: any;
        red100: any;
        red200: any;
        red300: any;
        red400: any;
        red500: any;
        red600: any;
        red700: any;
        red800: any;
        red900: any;
        purple0: any;
        purple100: any;
        purple200: any;
        purple300: any;
        purple400: any;
        purple500: any;
        purple600: any;
        purple700: any;
        purple800: any;
        purple900: any;
        orange0: any;
        orange100: any;
        orange200: any;
        orange300: any;
        orange400: any;
        orange500: any;
        orange600: any;
        orange700: any;
        orange800: any;
        orange900: any;
        grey0: any;
        grey100: any;
        grey200: any;
        grey300: any;
        grey400: any;
        grey500: any;
        grey600: any;
        grey700: any;
        grey800: any;
        grey900: any;
        green0: any;
        green100: any;
        green200: any;
        green300: any;
        green400: any;
        green500: any;
        green600: any;
        green700: any;
        green800: any;
        green900: any;
        dark100: any;
        dark200: any;
        dark400: any;
        dark60: any;
        dark600: any;
        dark700: any;
        dark800: any;
        dark900: any;
        blue0: any;
        blue100: any;
        blue200: any;
        blue300: any;
        blue400: any;
        blue500: any;
        blue600: any;
        blue700: any;
        blue800: any;
        blue900: any;
    };
    fontSizes: {
        10: any;
        12: any;
        14: any;
        16: any;
        20: any;
        24: any;
        32: any;
        40: any;
    };
    fonts: {
        inter: any;
    };
    radii: {
        1: any;
        2: any;
        3: any;
        pill: any;
        round: any;
    };
    sizes: {
        4: any;
        8: any;
        16: any;
        24: any;
        32: any;
        40: any;
        48: any;
        64: any;
        72: any;
        80: any;
    };
    space: {
        4: any;
        8: any;
        16: any;
        24: any;
        32: any;
        40: any;
        48: any;
        64: any;
        80: any;
        120: any;
    };
    zIndices: {
        1: any;
        2: any;
        3: any;
        4: any;
        max: any;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>>(...composers: { [K in keyof Composers]: Composers[K] extends string | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> | import("@stitches/react/types/util").Function ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS_1> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS_1;
            [x: number]: CSS_1;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : import("@stitches/react/types/util").WideObject) & {
        css: CSS_1;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS_1 & { [K2 in keyof Composers[K]]: K2 extends "variants" | "compoundVariants" | "defaultVariants" ? unknown : K2 extends keyof CSS_1 ? CSS_1[K2] : unknown; }; }) => import("@stitches/react/types/styled-component").CssComponent<import("@stitches/react/types/styled-component").StyledComponentType<Composers>, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    dark: "(prefers-color-scheme: dark)";
    hover: "(any-hover: hover)";
    laptop: "(min-width: 1023px)";
    light: "(prefers-color-scheme: light)";
    mobile: "(min-width: 479px)";
    motion: "(prefers-reduced-motion)";
    tablet: "(min-width: 767px)";
}, CSS_1>, getCssText: () => string, globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? import("@stitches/react/types/css").AtRule.FontFace | import("@stitches/react/types/css").AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: import("@stitches/react/types/css-util").CSS<{
        dark: "(prefers-color-scheme: dark)";
        hover: "(any-hover: hover)";
        laptop: "(min-width: 1023px)";
        light: "(prefers-color-scheme: light)";
        mobile: "(min-width: 479px)";
        motion: "(prefers-reduced-motion)";
        tablet: "(min-width: 767px)";
    }, {
        colors: {
            white1: any;
            white100: any;
            white200: any;
            white400: any;
            white60: any;
            white600: any;
            white800: any;
            teal0: any;
            teal100: any;
            teal200: any;
            teal300: any;
            teal400: any;
            teal500: any;
            teal600: any;
            teal700: any;
            teal800: any;
            teal900: any;
            red0: any;
            red100: any;
            red200: any;
            red300: any;
            red400: any;
            red500: any;
            red600: any;
            red700: any;
            red800: any;
            red900: any;
            purple0: any;
            purple100: any;
            purple200: any;
            purple300: any;
            purple400: any;
            purple500: any;
            purple600: any;
            purple700: any;
            purple800: any;
            purple900: any;
            orange0: any;
            orange100: any;
            orange200: any;
            orange300: any;
            orange400: any;
            orange500: any;
            orange600: any;
            orange700: any;
            orange800: any;
            orange900: any;
            grey0: any;
            grey100: any;
            grey200: any;
            grey300: any;
            grey400: any;
            grey500: any;
            grey600: any;
            grey700: any;
            grey800: any;
            grey900: any;
            green0: any;
            green100: any;
            green200: any;
            green300: any;
            green400: any;
            green500: any;
            green600: any;
            green700: any;
            green800: any;
            green900: any;
            dark100: any;
            dark200: any;
            dark400: any;
            dark60: any;
            dark600: any;
            dark700: any;
            dark800: any;
            dark900: any;
            blue0: any;
            blue100: any;
            blue200: any;
            blue300: any;
            blue400: any;
            blue500: any;
            blue600: any;
            blue700: any;
            blue800: any;
            blue900: any;
        };
        fontSizes: {
            10: any;
            12: any;
            14: any;
            16: any;
            20: any;
            24: any;
            32: any;
            40: any;
        };
        fonts: {
            inter: any;
        };
        radii: {
            1: any;
            2: any;
            3: any;
            pill: any;
            round: any;
        };
        sizes: {
            4: any;
            8: any;
            16: any;
            24: any;
            32: any;
            40: any;
            48: any;
            64: any;
            72: any;
            80: any;
        };
        space: {
            4: any;
            8: any;
            16: any;
            24: any;
            32: any;
            40: any;
            48: any;
            64: any;
            80: any;
            120: any;
        };
        zIndices: {
            1: any;
            2: any;
            3: any;
            4: any;
            max: any;
        };
    }, import("@stitches/react/types/config").DefaultThemeMap, {}>;
} : K extends `@property ${string}` ? import("@stitches/react/types/css").AtRule.Property : import("@stitches/react/types/css-util").CSS<{
    dark: "(prefers-color-scheme: dark)";
    hover: "(any-hover: hover)";
    laptop: "(min-width: 1023px)";
    light: "(prefers-color-scheme: light)";
    mobile: "(min-width: 479px)";
    motion: "(prefers-reduced-motion)";
    tablet: "(min-width: 767px)";
}, {
    colors: {
        white1: any;
        white100: any;
        white200: any;
        white400: any;
        white60: any;
        white600: any;
        white800: any;
        teal0: any;
        teal100: any;
        teal200: any;
        teal300: any;
        teal400: any;
        teal500: any;
        teal600: any;
        teal700: any;
        teal800: any;
        teal900: any;
        red0: any;
        red100: any;
        red200: any;
        red300: any;
        red400: any;
        red500: any;
        red600: any;
        red700: any;
        red800: any;
        red900: any;
        purple0: any;
        purple100: any;
        purple200: any;
        purple300: any;
        purple400: any;
        purple500: any;
        purple600: any;
        purple700: any;
        purple800: any;
        purple900: any;
        orange0: any;
        orange100: any;
        orange200: any;
        orange300: any;
        orange400: any;
        orange500: any;
        orange600: any;
        orange700: any;
        orange800: any;
        orange900: any;
        grey0: any;
        grey100: any;
        grey200: any;
        grey300: any;
        grey400: any;
        grey500: any;
        grey600: any;
        grey700: any;
        grey800: any;
        grey900: any;
        green0: any;
        green100: any;
        green200: any;
        green300: any;
        green400: any;
        green500: any;
        green600: any;
        green700: any;
        green800: any;
        green900: any;
        dark100: any;
        dark200: any;
        dark400: any;
        dark60: any;
        dark600: any;
        dark700: any;
        dark800: any;
        dark900: any;
        blue0: any;
        blue100: any;
        blue200: any;
        blue300: any;
        blue400: any;
        blue500: any;
        blue600: any;
        blue700: any;
        blue800: any;
        blue900: any;
    };
    fontSizes: {
        10: any;
        12: any;
        14: any;
        16: any;
        20: any;
        24: any;
        32: any;
        40: any;
    };
    fonts: {
        inter: any;
    };
    radii: {
        1: any;
        2: any;
        3: any;
        pill: any;
        round: any;
    };
    sizes: {
        4: any;
        8: any;
        16: any;
        24: any;
        32: any;
        40: any;
        48: any;
        64: any;
        72: any;
        80: any;
    };
    space: {
        4: any;
        8: any;
        16: any;
        24: any;
        32: any;
        40: any;
        48: any;
        64: any;
        80: any;
        120: any;
    };
    zIndices: {
        1: any;
        2: any;
        3: any;
        4: any;
        max: any;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>; })[]) => () => string, keyframes: (style: {
    [offset: string]: import("@stitches/react/types/css-util").CSS<{
        dark: "(prefers-color-scheme: dark)";
        hover: "(any-hover: hover)";
        laptop: "(min-width: 1023px)";
        light: "(prefers-color-scheme: light)";
        mobile: "(min-width: 479px)";
        motion: "(prefers-reduced-motion)";
        tablet: "(min-width: 767px)";
    }, {
        colors: {
            white1: any;
            white100: any;
            white200: any;
            white400: any;
            white60: any;
            white600: any;
            white800: any;
            teal0: any;
            teal100: any;
            teal200: any;
            teal300: any;
            teal400: any;
            teal500: any;
            teal600: any;
            teal700: any;
            teal800: any;
            teal900: any;
            red0: any;
            red100: any;
            red200: any;
            red300: any;
            red400: any;
            red500: any;
            red600: any;
            red700: any;
            red800: any;
            red900: any;
            purple0: any;
            purple100: any;
            purple200: any;
            purple300: any;
            purple400: any;
            purple500: any;
            purple600: any;
            purple700: any;
            purple800: any;
            purple900: any;
            orange0: any;
            orange100: any;
            orange200: any;
            orange300: any;
            orange400: any;
            orange500: any;
            orange600: any;
            orange700: any;
            orange800: any;
            orange900: any;
            grey0: any;
            grey100: any;
            grey200: any;
            grey300: any;
            grey400: any;
            grey500: any;
            grey600: any;
            grey700: any;
            grey800: any;
            grey900: any;
            green0: any;
            green100: any;
            green200: any;
            green300: any;
            green400: any;
            green500: any;
            green600: any;
            green700: any;
            green800: any;
            green900: any;
            dark100: any;
            dark200: any;
            dark400: any;
            dark60: any;
            dark600: any;
            dark700: any;
            dark800: any;
            dark900: any;
            blue0: any;
            blue100: any;
            blue200: any;
            blue300: any;
            blue400: any;
            blue500: any;
            blue600: any;
            blue700: any;
            blue800: any;
            blue900: any;
        };
        fontSizes: {
            10: any;
            12: any;
            14: any;
            16: any;
            20: any;
            24: any;
            32: any;
            40: any;
        };
        fonts: {
            inter: any;
        };
        radii: {
            1: any;
            2: any;
            3: any;
            pill: any;
            round: any;
        };
        sizes: {
            4: any;
            8: any;
            16: any;
            24: any;
            32: any;
            40: any;
            48: any;
            64: any;
            72: any;
            80: any;
        };
        space: {
            4: any;
            8: any;
            16: any;
            24: any;
            32: any;
            40: any;
            48: any;
            64: any;
            80: any;
            120: any;
        };
        zIndices: {
            1: any;
            2: any;
            3: any;
            4: any;
            max: any;
        };
    }, import("@stitches/react/types/config").DefaultThemeMap, {}>;
}) => {
    (): string;
    name: string;
}, styled: <Type extends keyof JSX.IntrinsicElements | import("react").ComponentType<any> | import("@stitches/react/types/util").Function, Composers extends (string | import("react").ComponentType<any> | import("@stitches/react/types/util").Function | {
    [name: string]: unknown;
})[], CSS_1 = import("@stitches/react/types/css-util").CSS<{
    dark: "(prefers-color-scheme: dark)";
    hover: "(any-hover: hover)";
    laptop: "(min-width: 1023px)";
    light: "(prefers-color-scheme: light)";
    mobile: "(min-width: 479px)";
    motion: "(prefers-reduced-motion)";
    tablet: "(min-width: 767px)";
}, {
    colors: {
        white1: any;
        white100: any;
        white200: any;
        white400: any;
        white60: any;
        white600: any;
        white800: any;
        teal0: any;
        teal100: any;
        teal200: any;
        teal300: any;
        teal400: any;
        teal500: any;
        teal600: any;
        teal700: any;
        teal800: any;
        teal900: any;
        red0: any;
        red100: any;
        red200: any;
        red300: any;
        red400: any;
        red500: any;
        red600: any;
        red700: any;
        red800: any;
        red900: any;
        purple0: any;
        purple100: any;
        purple200: any;
        purple300: any;
        purple400: any;
        purple500: any;
        purple600: any;
        purple700: any;
        purple800: any;
        purple900: any;
        orange0: any;
        orange100: any;
        orange200: any;
        orange300: any;
        orange400: any;
        orange500: any;
        orange600: any;
        orange700: any;
        orange800: any;
        orange900: any;
        grey0: any;
        grey100: any;
        grey200: any;
        grey300: any;
        grey400: any;
        grey500: any;
        grey600: any;
        grey700: any;
        grey800: any;
        grey900: any;
        green0: any;
        green100: any;
        green200: any;
        green300: any;
        green400: any;
        green500: any;
        green600: any;
        green700: any;
        green800: any;
        green900: any;
        dark100: any;
        dark200: any;
        dark400: any;
        dark60: any;
        dark600: any;
        dark700: any;
        dark800: any;
        dark900: any;
        blue0: any;
        blue100: any;
        blue200: any;
        blue300: any;
        blue400: any;
        blue500: any;
        blue600: any;
        blue700: any;
        blue800: any;
        blue900: any;
    };
    fontSizes: {
        10: any;
        12: any;
        14: any;
        16: any;
        20: any;
        24: any;
        32: any;
        40: any;
    };
    fonts: {
        inter: any;
    };
    radii: {
        1: any;
        2: any;
        3: any;
        pill: any;
        round: any;
    };
    sizes: {
        4: any;
        8: any;
        16: any;
        24: any;
        32: any;
        40: any;
        48: any;
        64: any;
        72: any;
        80: any;
    };
    space: {
        4: any;
        8: any;
        16: any;
        24: any;
        32: any;
        40: any;
        48: any;
        64: any;
        80: any;
        120: any;
    };
    zIndices: {
        1: any;
        2: any;
        3: any;
        4: any;
        max: any;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>>(type: Type, ...composers: { [K in keyof Composers]: Composers[K] extends string | import("react").ComponentType<any> | import("@stitches/react/types/util").Function ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS_1> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS_1;
            [x: number]: CSS_1;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : import("@stitches/react/types/util").WideObject) & {
        css: CSS_1;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS_1 & { [K2 in keyof Composers[K]]: K2 extends "variants" | "compoundVariants" | "defaultVariants" ? unknown : K2 extends keyof CSS_1 ? CSS_1[K2] : unknown; }; }) => import("@stitches/react/types/styled-component").StyledComponent<Type, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    dark: "(prefers-color-scheme: dark)";
    hover: "(any-hover: hover)";
    laptop: "(min-width: 1023px)";
    light: "(prefers-color-scheme: light)";
    mobile: "(min-width: 479px)";
    motion: "(prefers-reduced-motion)";
    tablet: "(min-width: 767px)";
}, import("@stitches/react/types/css-util").CSS<{
    dark: "(prefers-color-scheme: dark)";
    hover: "(any-hover: hover)";
    laptop: "(min-width: 1023px)";
    light: "(prefers-color-scheme: light)";
    mobile: "(min-width: 479px)";
    motion: "(prefers-reduced-motion)";
    tablet: "(min-width: 767px)";
}, {
    colors: {
        white1: any;
        white100: any;
        white200: any;
        white400: any;
        white60: any;
        white600: any;
        white800: any;
        teal0: any;
        teal100: any;
        teal200: any;
        teal300: any;
        teal400: any;
        teal500: any;
        teal600: any;
        teal700: any;
        teal800: any;
        teal900: any;
        red0: any;
        red100: any;
        red200: any;
        red300: any;
        red400: any;
        red500: any;
        red600: any;
        red700: any;
        red800: any;
        red900: any;
        purple0: any;
        purple100: any;
        purple200: any;
        purple300: any;
        purple400: any;
        purple500: any;
        purple600: any;
        purple700: any;
        purple800: any;
        purple900: any;
        orange0: any;
        orange100: any;
        orange200: any;
        orange300: any;
        orange400: any;
        orange500: any;
        orange600: any;
        orange700: any;
        orange800: any;
        orange900: any;
        grey0: any;
        grey100: any;
        grey200: any;
        grey300: any;
        grey400: any;
        grey500: any;
        grey600: any;
        grey700: any;
        grey800: any;
        grey900: any;
        green0: any;
        green100: any;
        green200: any;
        green300: any;
        green400: any;
        green500: any;
        green600: any;
        green700: any;
        green800: any;
        green900: any;
        dark100: any;
        dark200: any;
        dark400: any;
        dark60: any;
        dark600: any;
        dark700: any;
        dark800: any;
        dark900: any;
        blue0: any;
        blue100: any;
        blue200: any;
        blue300: any;
        blue400: any;
        blue500: any;
        blue600: any;
        blue700: any;
        blue800: any;
        blue900: any;
    };
    fontSizes: {
        10: any;
        12: any;
        14: any;
        16: any;
        20: any;
        24: any;
        32: any;
        40: any;
    };
    fonts: {
        inter: any;
    };
    radii: {
        1: any;
        2: any;
        3: any;
        pill: any;
        round: any;
    };
    sizes: {
        4: any;
        8: any;
        16: any;
        24: any;
        32: any;
        40: any;
        48: any;
        64: any;
        72: any;
        80: any;
    };
    space: {
        4: any;
        8: any;
        16: any;
        24: any;
        32: any;
        40: any;
        48: any;
        64: any;
        80: any;
        120: any;
    };
    zIndices: {
        1: any;
        2: any;
        3: any;
        4: any;
        max: any;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>>, theme: string & {
    className: string;
    selector: string;
} & {
    colors: {
        white1: import("@stitches/react/types/theme").Token<"white1", string, "colors", "">;
        white100: import("@stitches/react/types/theme").Token<"white100", string, "colors", "">;
        white200: import("@stitches/react/types/theme").Token<"white200", string, "colors", "">;
        white400: import("@stitches/react/types/theme").Token<"white400", string, "colors", "">;
        white60: import("@stitches/react/types/theme").Token<"white60", string, "colors", "">;
        white600: import("@stitches/react/types/theme").Token<"white600", string, "colors", "">;
        white800: import("@stitches/react/types/theme").Token<"white800", string, "colors", "">;
        teal0: import("@stitches/react/types/theme").Token<"teal0", string, "colors", "">;
        teal100: import("@stitches/react/types/theme").Token<"teal100", string, "colors", "">;
        teal200: import("@stitches/react/types/theme").Token<"teal200", string, "colors", "">;
        teal300: import("@stitches/react/types/theme").Token<"teal300", string, "colors", "">;
        teal400: import("@stitches/react/types/theme").Token<"teal400", string, "colors", "">;
        teal500: import("@stitches/react/types/theme").Token<"teal500", string, "colors", "">;
        teal600: import("@stitches/react/types/theme").Token<"teal600", string, "colors", "">;
        teal700: import("@stitches/react/types/theme").Token<"teal700", string, "colors", "">;
        teal800: import("@stitches/react/types/theme").Token<"teal800", string, "colors", "">;
        teal900: import("@stitches/react/types/theme").Token<"teal900", string, "colors", "">;
        red0: import("@stitches/react/types/theme").Token<"red0", string, "colors", "">;
        red100: import("@stitches/react/types/theme").Token<"red100", string, "colors", "">;
        red200: import("@stitches/react/types/theme").Token<"red200", string, "colors", "">;
        red300: import("@stitches/react/types/theme").Token<"red300", string, "colors", "">;
        red400: import("@stitches/react/types/theme").Token<"red400", string, "colors", "">;
        red500: import("@stitches/react/types/theme").Token<"red500", string, "colors", "">;
        red600: import("@stitches/react/types/theme").Token<"red600", string, "colors", "">;
        red700: import("@stitches/react/types/theme").Token<"red700", string, "colors", "">;
        red800: import("@stitches/react/types/theme").Token<"red800", string, "colors", "">;
        red900: import("@stitches/react/types/theme").Token<"red900", string, "colors", "">;
        purple0: import("@stitches/react/types/theme").Token<"purple0", string, "colors", "">;
        purple100: import("@stitches/react/types/theme").Token<"purple100", string, "colors", "">;
        purple200: import("@stitches/react/types/theme").Token<"purple200", string, "colors", "">;
        purple300: import("@stitches/react/types/theme").Token<"purple300", string, "colors", "">;
        purple400: import("@stitches/react/types/theme").Token<"purple400", string, "colors", "">;
        purple500: import("@stitches/react/types/theme").Token<"purple500", string, "colors", "">;
        purple600: import("@stitches/react/types/theme").Token<"purple600", string, "colors", "">;
        purple700: import("@stitches/react/types/theme").Token<"purple700", string, "colors", "">;
        purple800: import("@stitches/react/types/theme").Token<"purple800", string, "colors", "">;
        purple900: import("@stitches/react/types/theme").Token<"purple900", string, "colors", "">;
        orange0: import("@stitches/react/types/theme").Token<"orange0", string, "colors", "">;
        orange100: import("@stitches/react/types/theme").Token<"orange100", string, "colors", "">;
        orange200: import("@stitches/react/types/theme").Token<"orange200", string, "colors", "">;
        orange300: import("@stitches/react/types/theme").Token<"orange300", string, "colors", "">;
        orange400: import("@stitches/react/types/theme").Token<"orange400", string, "colors", "">;
        orange500: import("@stitches/react/types/theme").Token<"orange500", string, "colors", "">;
        orange600: import("@stitches/react/types/theme").Token<"orange600", string, "colors", "">;
        orange700: import("@stitches/react/types/theme").Token<"orange700", string, "colors", "">;
        orange800: import("@stitches/react/types/theme").Token<"orange800", string, "colors", "">;
        orange900: import("@stitches/react/types/theme").Token<"orange900", string, "colors", "">;
        grey0: import("@stitches/react/types/theme").Token<"grey0", string, "colors", "">;
        grey100: import("@stitches/react/types/theme").Token<"grey100", string, "colors", "">;
        grey200: import("@stitches/react/types/theme").Token<"grey200", string, "colors", "">;
        grey300: import("@stitches/react/types/theme").Token<"grey300", string, "colors", "">;
        grey400: import("@stitches/react/types/theme").Token<"grey400", string, "colors", "">;
        grey500: import("@stitches/react/types/theme").Token<"grey500", string, "colors", "">;
        grey600: import("@stitches/react/types/theme").Token<"grey600", string, "colors", "">;
        grey700: import("@stitches/react/types/theme").Token<"grey700", string, "colors", "">;
        grey800: import("@stitches/react/types/theme").Token<"grey800", string, "colors", "">;
        grey900: import("@stitches/react/types/theme").Token<"grey900", string, "colors", "">;
        green0: import("@stitches/react/types/theme").Token<"green0", string, "colors", "">;
        green100: import("@stitches/react/types/theme").Token<"green100", string, "colors", "">;
        green200: import("@stitches/react/types/theme").Token<"green200", string, "colors", "">;
        green300: import("@stitches/react/types/theme").Token<"green300", string, "colors", "">;
        green400: import("@stitches/react/types/theme").Token<"green400", string, "colors", "">;
        green500: import("@stitches/react/types/theme").Token<"green500", string, "colors", "">;
        green600: import("@stitches/react/types/theme").Token<"green600", string, "colors", "">;
        green700: import("@stitches/react/types/theme").Token<"green700", string, "colors", "">;
        green800: import("@stitches/react/types/theme").Token<"green800", string, "colors", "">;
        green900: import("@stitches/react/types/theme").Token<"green900", string, "colors", "">;
        dark100: import("@stitches/react/types/theme").Token<"dark100", string, "colors", "">;
        dark200: import("@stitches/react/types/theme").Token<"dark200", string, "colors", "">;
        dark400: import("@stitches/react/types/theme").Token<"dark400", string, "colors", "">;
        dark60: import("@stitches/react/types/theme").Token<"dark60", string, "colors", "">;
        dark600: import("@stitches/react/types/theme").Token<"dark600", string, "colors", "">;
        dark700: import("@stitches/react/types/theme").Token<"dark700", string, "colors", "">;
        dark800: import("@stitches/react/types/theme").Token<"dark800", string, "colors", "">;
        dark900: import("@stitches/react/types/theme").Token<"dark900", string, "colors", "">;
        blue0: import("@stitches/react/types/theme").Token<"blue0", string, "colors", "">;
        blue100: import("@stitches/react/types/theme").Token<"blue100", string, "colors", "">;
        blue200: import("@stitches/react/types/theme").Token<"blue200", string, "colors", "">;
        blue300: import("@stitches/react/types/theme").Token<"blue300", string, "colors", "">;
        blue400: import("@stitches/react/types/theme").Token<"blue400", string, "colors", "">;
        blue500: import("@stitches/react/types/theme").Token<"blue500", string, "colors", "">;
        blue600: import("@stitches/react/types/theme").Token<"blue600", string, "colors", "">;
        blue700: import("@stitches/react/types/theme").Token<"blue700", string, "colors", "">;
        blue800: import("@stitches/react/types/theme").Token<"blue800", string, "colors", "">;
        blue900: import("@stitches/react/types/theme").Token<"blue900", string, "colors", "">;
    };
    fontSizes: {
        10: import("@stitches/react/types/theme").Token<"10", string, "fontSizes", "">;
        12: import("@stitches/react/types/theme").Token<"12", string, "fontSizes", "">;
        14: import("@stitches/react/types/theme").Token<"14", string, "fontSizes", "">;
        16: import("@stitches/react/types/theme").Token<"16", string, "fontSizes", "">;
        20: import("@stitches/react/types/theme").Token<"20", string, "fontSizes", "">;
        24: import("@stitches/react/types/theme").Token<"24", string, "fontSizes", "">;
        32: import("@stitches/react/types/theme").Token<"32", string, "fontSizes", "">;
        40: import("@stitches/react/types/theme").Token<"40", string, "fontSizes", "">;
    };
    fonts: {
        inter: import("@stitches/react/types/theme").Token<"inter", string, "fonts", "">;
    };
    radii: {
        1: import("@stitches/react/types/theme").Token<"1", string, "radii", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "radii", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "radii", "">;
        pill: import("@stitches/react/types/theme").Token<"pill", string, "radii", "">;
        round: import("@stitches/react/types/theme").Token<"round", string, "radii", "">;
    };
    sizes: {
        4: import("@stitches/react/types/theme").Token<"4", string, "sizes", "">;
        8: import("@stitches/react/types/theme").Token<"8", string, "sizes", "">;
        16: import("@stitches/react/types/theme").Token<"16", string, "sizes", "">;
        24: import("@stitches/react/types/theme").Token<"24", string, "sizes", "">;
        32: import("@stitches/react/types/theme").Token<"32", string, "sizes", "">;
        40: import("@stitches/react/types/theme").Token<"40", string, "sizes", "">;
        48: import("@stitches/react/types/theme").Token<"48", string, "sizes", "">;
        64: import("@stitches/react/types/theme").Token<"64", string, "sizes", "">;
        72: import("@stitches/react/types/theme").Token<"72", string, "sizes", "">;
        80: import("@stitches/react/types/theme").Token<"80", string, "sizes", "">;
    };
    space: {
        4: import("@stitches/react/types/theme").Token<"4", string, "space", "">;
        8: import("@stitches/react/types/theme").Token<"8", string, "space", "">;
        16: import("@stitches/react/types/theme").Token<"16", string, "space", "">;
        24: import("@stitches/react/types/theme").Token<"24", string, "space", "">;
        32: import("@stitches/react/types/theme").Token<"32", string, "space", "">;
        40: import("@stitches/react/types/theme").Token<"40", string, "space", "">;
        48: import("@stitches/react/types/theme").Token<"48", string, "space", "">;
        64: import("@stitches/react/types/theme").Token<"64", string, "space", "">;
        80: import("@stitches/react/types/theme").Token<"80", string, "space", "">;
        120: import("@stitches/react/types/theme").Token<"120", string, "space", "">;
    };
    zIndices: {
        1: import("@stitches/react/types/theme").Token<"1", string, "zIndices", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "zIndices", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "zIndices", "">;
        4: import("@stitches/react/types/theme").Token<"4", string, "zIndices", "">;
        max: import("@stitches/react/types/theme").Token<"max", string, "zIndices", "">;
    };
};
export declare const darkTheme: string & {
    className: string;
    selector: string;
} & import("@stitches/react/types/stitches").ThemeTokens<{
    color: {
        white1: "rgba(255, 255, 255)";
        white100: "rgba(255, 255, 255, 0.1)";
        white200: "rgba(255, 255, 255, 0.2)";
        white400: "rgba(255, 255, 255, 0.4)";
        white60: "rgba(255, 255, 255, 0.06)";
        white600: "rgba(255, 255, 255, 0.6)";
        white800: "rgba(255, 255, 255, 0.8)";
        teal0: "#E6F8FA";
        teal100: "#D1EDF0";
        teal200: "#AEE1E6";
        teal300: "#6CD0D9";
        teal400: "#00B6C7";
        teal500: "#12A5B2";
        teal600: "#0E828C";
        teal700: "#055E66";
        teal800: "#08474C";
        teal900: "#052F33";
        red0: "#FFD9D6";
        red100: "#FFECEB";
        red200: "#FFC3BF";
        red300: "#F6A7A1";
        red400: "#FF3344";
        red500: "#EA1F30";
        red600: "#CF1726";
        red700: "#A50D0D";
        red800: "#8D0B0B";
        red900: "#790606";
        purple0: "#EFECFE";
        purple100: "#DED8FD";
        purple200: "#C6BBFC";
        purple300: "#ADA6FF";
        purple400: "#9080FF";
        purple500: "#7349F2";
        purple600: "#5322E5";
        purple700: "#451DBF";
        purple800: "#371799";
        purple900: "#250B73";
        orange0: "#FFF6EB";
        orange100: "#FFECD6";
        orange200: "#FFE1BF";
        orange300: "#F6CEA1";
        orange400: "#FFA133";
        orange500: "#EA8D1F";
        orange600: "#D46A00";
        orange700: "#AF5200";
        orange800: "#8C4100";
        orange900: "#6A2E00";
        grey0: "#DFE3EB";
        grey100: "#F0F2F7";
        grey200: "#CCD2DE";
        grey300: "#B1B8C7";
        grey400: "#98A1B2";
        grey500: "#828B9E";
        grey600: "#677184";
        grey700: "#50596B";
        grey800: "#353F52";
        grey900: "#121D33";
        green0: "#E6FAEC";
        green100: "#D1F0DB";
        green200: "#AEE6CA";
        green300: "#8BDCB3";
        green400: "#17CE73";
        green500: "#00B26B";
        green600: "#00994C";
        green700: "#006633";
        green800: "#004C26";
        green900: "#003319";
        dark100: "rgba(5, 24, 61, 0.1)";
        dark200: "rgba(5, 24, 61, 0.25)";
        dark400: "rgba(5, 24, 61, 0.4)";
        dark60: "rgba(13, 53, 120, 0.06)";
        dark600: "rgba(3, 17, 47, 0.6)";
        dark700: "rgba(3, 17, 47, 0.7)";
        dark800: "rgba(18, 29, 51, 0.8)";
        dark900: "rgba(18, 29, 51, 0.9)";
        blue0: "#ECF5FE";
        blue100: "#D8EBFD";
        blue200: "#BBDBFC";
        blue300: "#85B5F8";
        blue400: "#619FF7";
        blue500: "#3D89F5";
        blue600: "#0C6CF2";
        blue700: "#1656B9";
        blue800: "#144699";
        blue900: "#0D3578";
    };
}, "">;
export declare const setGlobalCss: () => string;
export declare type CSS = Stitches.CSS<typeof config>;
//# sourceMappingURL=stitches.config.d.ts.map